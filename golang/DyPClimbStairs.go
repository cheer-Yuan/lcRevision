package main

/*

假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

dp[i]： 爬到i层楼梯的方法数 = 爬到 i - 1 层的方法数（再爬一层） + 爬到 i - 2 层的方法数（再爬2层）
dp[i] = dp[i - 1] + dp[i - 2]
初始化：dp[2] = 2 = dp[1] + dp[0] = 1 + dp[0] , dp[0] = 1
*/

func climbStairs(n int) int {
	dp := make([]int, n + 1)

	dp[0], dp[1] = 1, 1

	if n > 1 {
		for i := 2; i <= n; i++ {
			dp[i] = dp[i - 1] + dp[i - 2]
		}
	}

	return dp[n]
}


/*
一步一个台阶，两个台阶，三个台阶，.......，直到 m个台阶。问有多少种不同的方法可以爬到楼顶

思路：
物品价值=步数，可无限重复，考虑完全背包 --> 内循环从前向后遍历
dp[i] = 对于一步某个及以下的台阶数，可以爬到i层的方法数
排列问题：外层背包，内层价值

*/